
# to test:
# docker run --rm -it --name seaweedfs_test --net seaweedfs_internal --cap-add SYS_ADMIN --device=/dev/fuse:/dev/fuse --security-opt=apparmor:unconfined --entrypoint sh chrislusf/seaweedfs:1.41
# / # apk --no-cache add fuse
# / # weed mount -filer=filer:8888 -dir=/mnt -filer.path=/
# then docker exec into that container, as fise will be running in the foreground...
# docker exec -it seaweedfs_test sh
# / # cd /mnt
# /mnt # cp -r /var .
# /mnt # du 
# and then do the same from the other swarm nodes...

version: "3.6"

services:
  master:
    hostname: "{{.Node.Hostname}}_{{.Service.Name}}"
    image: chrislusf/seaweedfs:latest
    command: "master -ip 0.0.0.0 -port 9333 -defaultReplication=000"
    networks:
      - internal
    deploy:
      replicas: 1

  volume:
    hostname: "{{.Node.Hostname}}_{{.Service.Name}}"
    image: chrislusf/seaweedfs:latest
    command: 'volume -max=15 -mserver=master:9333 -port=8080'
    networks:
      - internal
    volumes:
      - data:/data
    deploy:
      mode: global

  filer:
    hostname: "{{.Node.Hostname}}_{{.Service.Name}}"
    image: chrislusf/seaweedfs:latest
    command: 'filer -master=master:9333'
    networks:
      - internal
    # TODO: need to switch this to a clustered FileStore (at which point the deploy mode can be global)
    volumes:
      - filer:/data
    deploy:
      replicas: 1
      placement:
        constraints:
         - node.role == manager
         # constrain to one specific node until we have a clustered filestore
         - node.labels.${STACKDOMAIN:-loc.alho.st}-seaweedfs == true

      #mode: global

  s3:
    image: chrislusf/seaweedfs:latest
    # ports:
    # - 8333:8333
    command: 's3 -filer=filer:8888'
    networks:
      - internal

  docker-volume-plugin-run-once:
    image: docker:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: "docker plugin install --alias swarm --grant-all-permissions svendowideit/seaweedfs-volume-plugin:next DEBUG=true"
    deploy:
      mode: global
      restart_policy:
        condition: none

volumes:
  data:
  filer:

networks:
  internal:
    attachable: true
    # external:
    #   name: host
  # infra_traefik:
  #   external: true
