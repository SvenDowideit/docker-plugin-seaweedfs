
# to test:
# docker run --rm -it --name seaweedfs_test --net seaweedfs_internal --cap-add SYS_ADMIN --device=/dev/fuse:/dev/fuse --security-opt=apparmor:unconfined --entrypoint sh chrislusf/seaweedfs:1.41
# / # apk --no-cache add fuse
# / # weed mount -filer=filer:8888 -dir=/mnt -filer.path=/
# then docker exec into that container, as fuse will be running in the foreground...
# docker exec -it seaweedfs_test sh
# / # cd /mnt
# /mnt # cp -r /var .
# /mnt # du 
# and then do the same from the other swarm nodes...

version: "3.6"

services:
  master:
    hostname: "{{.Node.Hostname}}_{{.Service.Name}}"
    image: chrislusf/seaweedfs:latest
    command: "master -ip master -port 9333 -defaultReplication=000"
    networks:
      - internal
    # volumes:
    #   - data:/data
    deploy:
      replicas: 1

  volume:
    hostname: "{{.Node.Hostname}}_{{.Service.Name}}"
    image: chrislusf/seaweedfs:latest
    command: 'volume -max=50 -mserver=master:9333 -port=8080'
    networks:
      - internal
    volumes:
      - data:/data
    deploy:
      mode: global
      #replicas: 3

  filer:
    hostname: "{{.Node.Hostname}}_{{.Service.Name}}"
    # use an entrypoint script to detect peer's using the dnsrr response
    image: svendowideit/seaweedfs-volume-plugin-filer:seaweedfs-2.24
    networks:
      - internal
    volumes:
      - filer:/filer/
    deploy:
      mode: global
      endpoint_mode: dnsrr      

  # TODO: figure out how to handle a swarm where the number of managers has been reduced...
  # this is a --force-new-cluster event, so probably just needs disaster recovery docs

  s3:
    image: chrislusf/seaweedfs:latest
    # ports:
    # - 8333:8333
    command: 's3 -filer=filer:8888'
    networks:
      - internal
    volumes:
      - data:/data

  prepare-plugin-dir-run-once:
    image: alpine:latest
    volumes:
      - /var/lib/docker/plugins:/var/lib/docker/plugins
    command: "mkdir -p /var/lib/docker/plugins/swarm/rootfs/tmp /var/lib/docker/plugins/swarm/rootfs/mnt"
    deploy:
      mode: global
      restart_policy:
        condition: none

  # disabled for dev
  docker-volume-plugin:
    #image: ${PLUGIN_NAME}:${PLUGIN_TAG}
    image: svendowideit/seaweedfs-volume-plugin-rootfs:seaweedfs-2.24
    environment:
      DEBUG: 'true'
    volumes:
      - /var/lib/docker/plugins/swarm/rootfs/tmp:/tmp
      - /var/lib/docker/plugins/swarm/rootfs/mnt:/mnt
      #- /var/lib/docker/plugins/swarm/propagated-mount:/propagated-mount
      - /run:/run
    networks:
      - internal
    deploy:
      mode: global

volumes:
  data:
  filer:
  #etcd:

networks:
  internal:
    attachable: true
